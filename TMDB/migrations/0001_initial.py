# Generated by Django 4.1.7 on 2023-07-04 17:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('genre', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Movie_log',
            fields=[
                ('movie_id', models.IntegerField(primary_key=True, serialize=False)),
                ('movie_name', models.CharField(max_length=255)),
                ('backdrop_url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tv_show_log',
            fields=[
                ('tv_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tv_name', models.CharField(max_length=255)),
                ('backdrop_url', models.URLField(blank=True, null=True)),
                ('finished_watcher', models.ManyToManyField(blank=True, related_name='tv_watcher_finished', to=settings.AUTH_USER_MODEL)),
                ('planned_watcher', models.ManyToManyField(blank=True, related_name='planned_tv_watcher', to=settings.AUTH_USER_MODEL)),
                ('tv_genre', models.ManyToManyField(related_name='genre_tv', to='TMDB.genre')),
                ('tv_watcher', models.ManyToManyField(blank=True, related_name='user_tv_watcher', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tv_review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.TextField(blank=True, max_length=1000)),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('review_date', models.DateTimeField(auto_now=True)),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tv_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tv_review', to='TMDB.tv_show_log')),
            ],
        ),
        migrations.CreateModel(
            name='Movie_review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.TextField(blank=True, max_length=1000)),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('review_date', models.DateTimeField(auto_now=True)),
                ('movie_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movie_review', to='TMDB.movie_log')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='movie_log',
            name='finished_watcher',
            field=models.ManyToManyField(blank=True, related_name='movie_watcher_finished', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='movie_log',
            name='movie_genre',
            field=models.ManyToManyField(related_name='genre_movie', to='TMDB.genre'),
        ),
        migrations.AddField(
            model_name='movie_log',
            name='movie_watcher',
            field=models.ManyToManyField(blank=True, related_name='user_movie_watcher', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='movie_log',
            name='planned_watcher',
            field=models.ManyToManyField(blank=True, related_name='planned_movie_watcher', to=settings.AUTH_USER_MODEL),
        ),
    ]
